{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nconst UPDATE_PRICE = gql`\n  mutation productVariantUpdate($input: ProductVariantInput!) {\n    productVariantUpdate(input: $input) {\n      product {\n        title\n      }\n      productVariant {\n        id\n        price\n      }\n    }\n  }\n`;\n\nclass EditProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      discount: \"\",\n      price: \"\",\n      variantId: \"\",\n      showToast: false\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {\n      const item = store.get(\"item\");\n      const price = item.variants.edges[0].node.price;\n      const variantId = item.variants.edges[0].node.id;\n      const discounter = price * 0.1;\n      this.setState({\n        price,\n        variantId\n      });\n      return (price - discounter).toFixed(2);\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      discount: this.itemToBeConsumed()\n    });\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      discount,\n      variantId\n    } = this.state;\n    return /*#__PURE__*/_jsx(Mutation, {\n      mutation: UPDATE_PRICE,\n      children: (handleSubmit, {\n        error,\n        data\n      }) => {\n        const showError = error && /*#__PURE__*/_jsx(Banner, {\n          status: \"critical\",\n          children: error.message\n        });\n\n        const showToast = data && data.productVariantUpdate && /*#__PURE__*/_jsx(Toast, {\n          content: \"Successfully updated\",\n          onDismiss: () => this.setState({\n            showToast: false\n          })\n        });\n\n        return /*#__PURE__*/_jsx(Frame, {\n          children: /*#__PURE__*/_jsx(Page, {\n            children: /*#__PURE__*/_jsxs(Layout, {\n              children: [showToast, /*#__PURE__*/_jsx(Layout.Section, {\n                children: showError\n              }), /*#__PURE__*/_jsxs(Layout.Section, {\n                children: [/*#__PURE__*/_jsx(DisplayText, {\n                  size: \"large\",\n                  children: name\n                }), /*#__PURE__*/_jsxs(Form, {\n                  children: [/*#__PURE__*/_jsx(Card, {\n                    sectioned: true,\n                    children: /*#__PURE__*/_jsxs(FormLayout, {\n                      children: [/*#__PURE__*/_jsxs(FormLayout.Group, {\n                        children: [/*#__PURE__*/_jsx(TextField, {\n                          prefix: \"$\",\n                          value: price,\n                          disabled: true,\n                          label: \"Original price\",\n                          type: \"price\"\n                        }), /*#__PURE__*/_jsx(TextField, {\n                          prefix: \"$\",\n                          value: discount,\n                          onChange: this.handleChange(\"discount\"),\n                          label: \"Discounted price\",\n                          type: \"discount\"\n                        })]\n                      }), /*#__PURE__*/_jsx(\"p\", {\n                        children: \"This sale price will expire in two weeks\"\n                      })]\n                    })\n                  }), /*#__PURE__*/_jsx(PageActions, {\n                    primaryAction: [{\n                      content: \"Save\",\n                      onAction: () => {\n                        const productVariableInput = {\n                          id: variantId,\n                          price: discount\n                        };\n                        handleSubmit({\n                          variables: {\n                            input: productVariableInput\n                          }\n                        });\n                      }\n                    }],\n                    secondaryActions: [{\n                      content: \"Remove discount\"\n                    }]\n                  })]\n                })]\n              })]\n            })\n          })\n        });\n      }\n    });\n  }\n\n}\n\nexport default EditProducts;","map":{"version":3,"sources":["C:/Users/Jakob/Documents/shopify-app-tutorial/pages/edit-products.js"],"names":["React","Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","UPDATE_PRICE","EditProducts","Component","discount","price","variantId","showToast","field","value","setState","item","get","variants","edges","node","id","discounter","toFixed","componentDidMount","itemToBeConsumed","render","name","state","handleSubmit","error","data","showError","message","productVariantUpdate","handleChange","content","onAction","productVariableInput","variables","input"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Banner,\r\n  Card,\r\n  DisplayText,\r\n  Form,\r\n  FormLayout,\r\n  Frame,\r\n  Layout,\r\n  Page,\r\n  PageActions,\r\n  TextField,\r\n  Toast,\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation } from \"react-apollo\";\r\n\r\nconst UPDATE_PRICE = gql`\r\n  mutation productVariantUpdate($input: ProductVariantInput!) {\r\n    productVariantUpdate(input: $input) {\r\n      product {\r\n        title\r\n      }\r\n      productVariant {\r\n        id\r\n        price\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass EditProducts extends React.Component {\r\n  state = {\r\n    discount: \"\",\r\n    price: \"\",\r\n    variantId: \"\",\r\n    showToast: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ discount: this.itemToBeConsumed() });\r\n  }\r\n\r\n  render() {\r\n    const { name, price, discount, variantId } = this.state;\r\n    return (\r\n      <Mutation mutation={UPDATE_PRICE}>\r\n        {(handleSubmit, { error, data }) => {\r\n          const showError = error && (\r\n            <Banner status=\"critical\">{error.message}</Banner>\r\n          );\r\n          const showToast = data && data.productVariantUpdate && (\r\n            <Toast\r\n              content=\"Successfully updated\"\r\n              onDismiss={() => this.setState({ showToast: false })}\r\n            />\r\n          );\r\n          return (\r\n            <Frame>\r\n              <Page>\r\n                <Layout>\r\n                  {showToast}\r\n                  <Layout.Section>{showError}</Layout.Section>\r\n                  <Layout.Section>\r\n                    <DisplayText size=\"large\">{name}</DisplayText>\r\n                    <Form>\r\n                      <Card sectioned>\r\n                        <FormLayout>\r\n                          <FormLayout.Group>\r\n                            <TextField\r\n                              prefix=\"$\"\r\n                              value={price}\r\n                              disabled={true}\r\n                              label=\"Original price\"\r\n                              type=\"price\"\r\n                            />\r\n                            <TextField\r\n                              prefix=\"$\"\r\n                              value={discount}\r\n                              onChange={this.handleChange(\"discount\")}\r\n                              label=\"Discounted price\"\r\n                              type=\"discount\"\r\n                            />\r\n                          </FormLayout.Group>\r\n                          <p>This sale price will expire in two weeks</p>\r\n                        </FormLayout>\r\n                      </Card>\r\n                      <PageActions\r\n                        primaryAction={[\r\n                          {\r\n                            content: \"Save\",\r\n                            onAction: () => {\r\n                              const productVariableInput = {\r\n                                id: variantId,\r\n                                price: discount,\r\n                              };\r\n                              handleSubmit({\r\n                                variables: { input: productVariableInput },\r\n                              });\r\n                            },\r\n                          },\r\n                        ]}\r\n                        secondaryActions={[\r\n                          {\r\n                            content: \"Remove discount\",\r\n                          },\r\n                        ]}\r\n                      />\r\n                    </Form>\r\n                  </Layout.Section>\r\n                </Layout>\r\n              </Page>\r\n            </Frame>\r\n          );\r\n        }}\r\n      </Mutation>\r\n    );\r\n  }\r\n\r\n  handleChange = (field) => {\r\n    return (value) => this.setState({ [field]: value });\r\n  };\r\n\r\n  itemToBeConsumed = () => {\r\n    const item = store.get(\"item\");\r\n    const price = item.variants.edges[0].node.price;\r\n    const variantId = item.variants.edges[0].node.id;\r\n    const discounter = price * 0.1;\r\n    this.setState({ price, variantId });\r\n    return (price - discounter).toFixed(2);\r\n  };\r\n}\r\n\r\nexport default EditProducts;\r\n"]},"metadata":{},"sourceType":"module"}